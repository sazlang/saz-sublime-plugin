<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>fileTypes</key>
	<array>
		<string>saz</string>
	</array>
	<key>firstLineMatch</key>
	<string>^#!/.*\b(saz)$\n?</string>
	<key>keyEquivalent</key>
	<string>^~J</string>
	<key>name</key>
	<string>Saz</string>
	<key>patterns</key>
	<array>
		<dict>
			<key>include</key>
			<string>#core</string>
		</dict>
	</array>
	<key>repository</key>
	<dict>
		<key>brackets</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#round-brackets</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#square-brackets</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#curly-brackets</string>
				</dict>
			</array>
		</dict>
		<key>comments</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#special-comments-conditional-compilation</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>/\*\*(?!/)</string>
					<key>captures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.saz</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\*/</string>
					<key>name</key>
					<string>comment.block.documentation.saz</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>/\*</string>
					<key>captures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.saz</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\*/</string>
					<key>name</key>
					<string>comment.block.saz</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.saz</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(&lt;!--|--&gt;)</string>
					<key>name</key>
					<string>comment.block.html.saz</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.saz</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(//).*$\n?</string>
					<key>name</key>
					<string>comment.line.double-slash.saz</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.saz</string>
						</dict>
					</dict>
					<key>match</key>
					<string>^(#!).*$\n?</string>
					<key>name</key>
					<string>comment.line.shebang.saz</string>
				</dict>
			</array>
		</dict>
		<key>core</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#literal-function-labels</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#literal-arrow-function-labels</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#literal-labels</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#literal-keywords</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#literal-for</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#literal-switch</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#expression</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#literal-punctuation</string>
				</dict>
			</array>
		</dict>
		<key>curly-brackets</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>\{</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>meta.brace.curly.saz</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\}</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>meta.brace.curly.saz</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.group.braces.curly</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>$self</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>expression</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#support</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#literal-function</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#literal-arrow-function</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#literal-prototype</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#literal-regexp</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#literal-number</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#literal-tagged-html</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#literal-template-string</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#literal-string</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#literal-language-constant</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#literal-language-variable</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#literal-method</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#literal-module</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#literal-class</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#literal-constructor</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#literal-method-call</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#literal-function-call</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#comments</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#brackets</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#literal-operators</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#literal-variable</string>
				</dict>
			</array>
		</dict>
		<key>function-declaration-parameters</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>\(</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.parameters.begin.saz</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\)</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.parameters.end.saz</string>
						</dict>
					</dict>
					<key>patterns</key>
					<array>
						<dict>
							<key>match</key>
							<string>(?&lt;!\.)\.\.\.</string>
							<key>name</key>
							<string>keyword.operator.spread.saz</string>
						</dict>
						<dict>
							<key>match</key>
							<string>[_$a-zA-Z][$\w]*</string>
							<key>name</key>
							<string>variable.parameter.function.saz</string>
						</dict>
						<dict>
							<key>match</key>
							<string>,</string>
							<key>name</key>
							<string>punctuation.separator.parameter.function.saz</string>
						</dict>
						<dict>
							<key>begin</key>
							<string>=</string>
							<key>beginCaptures</key>
							<dict>
								<key>0</key>
								<dict>
									<key>name</key>
									<string>keyword.operator.assignment.saz</string>
								</dict>
							</dict>
							<key>end</key>
							<string>(?=[,)])</string>
							<key>name</key>
							<string>meta.parameter.optional.saz</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>#expression</string>
								</dict>
							</array>
						</dict>
						<dict>
							<key>include</key>
							<string>#comments</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>literal-arrow-function</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(?x)
  (\basync)?\s*
  (?=\([^()]*\)\s*(=&gt;))</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.type.saz</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?&lt;=\))\s*(=&gt;)</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.type.function.arrow.saz</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.function.arrow.saz</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#function-declaration-parameters</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.type.saz</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>variable.parameter.function.saz</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>storage.type.function.arrow.saz</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(?x)
  (\basync)?\s*
  \b([_$a-zA-Z][$\w]*)\s*(=&gt;)</string>
					<key>name</key>
					<string>meta.function.arrow.saz</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>(?x)
  (\b[_$a-zA-Z][$\w]*)
  \s*=
  \s*(async)?
  \s*(?=\([^()]*\)\s*(=&gt;))</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.saz</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>storage.type.saz</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?&lt;=\))\s*(=&gt;)</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.type.function.arrow.saz</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.function.arrow.saz</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#function-declaration-parameters</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.saz</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>storage.type.saz</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>variable.parameter.function.saz</string>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>storage.type.function.arrow.saz</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(?x)
  (\b[_$a-zA-Z][$\w]*)
  \s*=
  \s*(async)?
  \s*\b([_$a-zA-Z][$\w]*)\s*(=&gt;)</string>
					<key>name</key>
					<string>meta.function.arrow.saz</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>(?x)
  (\b_?[A-Z][$\w]*)?
  (\.)(prototype)
  (\.)([_$a-zA-Z][$\w]*)
  \s*=
  \s*(async)?
  \s*(?=\([^()]*\)\s*(=&gt;))</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>entity.name.class.saz</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.accessor.saz</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>variable.language.prototype.saz</string>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.accessor.saz</string>
						</dict>
						<key>5</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.saz</string>
						</dict>
						<key>6</key>
						<dict>
							<key>name</key>
							<string>storage.type.saz</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?&lt;=\))\s*(=&gt;)</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.type.function.arrow.saz</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.prototype.function.arrow.saz</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#function-declaration-parameters</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>entity.name.class.saz</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.accessor.saz</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>variable.language.prototype.saz</string>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.accessor.saz</string>
						</dict>
						<key>5</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.saz</string>
						</dict>
						<key>6</key>
						<dict>
							<key>name</key>
							<string>storage.type.saz</string>
						</dict>
						<key>7</key>
						<dict>
							<key>name</key>
							<string>variable.parameter.function.saz</string>
						</dict>
						<key>8</key>
						<dict>
							<key>name</key>
							<string>storage.type.function.arrow.saz</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(?x)
  (\b_?[A-Z][$\w]*)?
  (\.)(prototype)
  (\.)([_$a-zA-Z][$\w]*)
  \s*=
  \s*(async)?
  \s*\b([_$a-zA-Z][$\w]*)\s*(=&gt;)</string>
					<key>name</key>
					<string>meta.prototype.function.arrow.saz</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>(?x)
  (\b_?[A-Z][$\w]*)?
  (\.)([_$a-zA-Z][$\w]*)
  \s*=
  \s*(async)?
  \s*(?=\([^()]*\)\s*(=&gt;))</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>entity.name.class.saz</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.accessor.saz</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.saz</string>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>storage.type.saz</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?&lt;=\))\s*(=&gt;)</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.type.function.arrow.saz</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.function.static.arrow.saz</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#function-declaration-parameters</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>entity.name.class.saz</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.accessor.saz</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.saz</string>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>storage.type.saz</string>
						</dict>
						<key>5</key>
						<dict>
							<key>name</key>
							<string>variable.parameter.function.saz</string>
						</dict>
						<key>6</key>
						<dict>
							<key>name</key>
							<string>storage.type.function.arrow.saz</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(?x)
  (\b_?[A-Z][$\w]*)?
  (\.)([_$a-zA-Z][$\w]*)
  \s*=
  \s*(async)?
  \s*\b([_$a-zA-Z][$\w]*)\s*(=&gt;)</string>
					<key>name</key>
					<string>meta.function.static.arrow.saz</string>
				</dict>
			</array>
		</dict>
		<key>literal-arrow-function-labels</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(?x)
  \b([_$a-zA-Z][$\w]*)
  \s*(:)
  \s*(async)?
  \s*(?=\([^()]*\)\s*(=&gt;))</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.saz</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.separator.key-value.saz</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>storage.type.saz</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?&lt;=\))\s*(=&gt;)</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.type.function.arrow.saz</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.function.json.arrow.saz</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#function-declaration-parameters</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.saz</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.separator.key-value.saz</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>storage.type.saz</string>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>variable.parameter.function.saz</string>
						</dict>
						<key>5</key>
						<dict>
							<key>name</key>
							<string>storage.type.function.arrow.saz</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(?x)
  \b([_$a-zA-Z][$\w]*)
  \s*(:)
  \s*(async)?
  \s*\b([_$a-zA-Z][$\w]*)\s*(=&gt;)</string>
					<key>name</key>
					<string>meta.function.json.arrow.saz</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>(?x)
  (?:
    ((')((?:[^']|\\')*)('))|
    ((")((?:[^"]|\\")*)("))
  )
  \s*(:)
  \s*(async)?
  \s*(?=\([^()]*\)\s*(=&gt;))</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>string.quoted.single.saz</string>
						</dict>
						<key>10</key>
						<dict>
							<key>name</key>
							<string>storage.type.saz</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.saz</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.saz</string>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.saz</string>
						</dict>
						<key>5</key>
						<dict>
							<key>name</key>
							<string>string.quoted.double.saz</string>
						</dict>
						<key>6</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.saz</string>
						</dict>
						<key>7</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.saz</string>
						</dict>
						<key>8</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.saz</string>
						</dict>
						<key>9</key>
						<dict>
							<key>name</key>
							<string>punctuation.separator.key-value.saz</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?&lt;=\))\s*(=&gt;)</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.type.function.arrow.saz</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.function.json.arrow.saz</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#function-declaration-parameters</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>string.quoted.single.saz</string>
						</dict>
						<key>10</key>
						<dict>
							<key>name</key>
							<string>storage.type.saz</string>
						</dict>
						<key>11</key>
						<dict>
							<key>name</key>
							<string>variable.parameter.function.saz</string>
						</dict>
						<key>12</key>
						<dict>
							<key>name</key>
							<string>storage.type.function.arrow.saz</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.saz</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.saz</string>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.saz</string>
						</dict>
						<key>5</key>
						<dict>
							<key>name</key>
							<string>string.quoted.double.saz</string>
						</dict>
						<key>6</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.saz</string>
						</dict>
						<key>7</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.saz</string>
						</dict>
						<key>8</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.saz</string>
						</dict>
						<key>9</key>
						<dict>
							<key>name</key>
							<string>punctuation.separator.key-value.saz</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(?x)
  (?:
    ((')((?:[^']|\\')*)('))|
    ((")((?:[^"]|\\")*)("))
  )
  \s*(:)
  \s*(async)?
  \s*\b([_$a-zA-Z][$\w]*)\s*(=&gt;)</string>
					<key>name</key>
					<string>meta.function.json.arrow.saz</string>
				</dict>
			</array>
		</dict>
		<key>literal-class</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(?x)
  (?&lt;!\.)\b(sinif)
  \s+((?!\b(yüklə)\b)[_$a-zA-Z][$\w]*)?</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.type.class.saz</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>entity.name.class.saz</string>
						</dict>
					</dict>
					<key>end</key>
					<string>}</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>meta.brace.curly.saz</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.class.saz</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>begin</key>
							<string>\b(yüklə)\b</string>
							<key>beginCaptures</key>
							<dict>
								<key>1</key>
								<dict>
									<key>name</key>
									<string>storage.type.extends.saz</string>
								</dict>
							</dict>
							<key>end</key>
							<string>(?={)</string>
							<key>name</key>
							<string>meta.class.extends.saz</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>#expression</string>
								</dict>
							</array>
						</dict>
						<dict>
							<key>begin</key>
							<string>{</string>
							<key>beginCaptures</key>
							<dict>
								<key>0</key>
								<dict>
									<key>name</key>
									<string>meta.brace.curly.saz</string>
								</dict>
							</dict>
							<key>end</key>
							<string>(?=})</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>#brackets</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#comments</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#literal-method</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#literal-property-initializer</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#expression</string>
								</dict>
							</array>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>literal-constructor</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(new)\s+(?=[_$a-zA-Z][$\w.]*)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.new.saz</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?![_$a-zA-Z.])</string>
					<key>name</key>
					<string>meta.instance.constructor</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#support</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#literal-language-variable</string>
						</dict>
						<dict>
							<key>match</key>
							<string>\.</string>
							<key>name</key>
							<string>keyword.operator.accessor.saz</string>
						</dict>
						<dict>
							<key>match</key>
							<string>(?&lt;=\.)\s*[_$a-zA-Z][$\w]*(?=\s*\()</string>
							<key>name</key>
							<string>entity.name.type.new.saz</string>
						</dict>
						<dict>
							<key>captures</key>
							<dict>
								<key>2</key>
								<dict>
									<key>name</key>
									<string>variable.other.property.saz</string>
								</dict>
							</dict>
							<key>match</key>
							<string>(?&lt;=\.)\s*[_$a-zA-Z][$\w]*</string>
							<key>name</key>
							<string>meta.property.object.saz</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>literal-for</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(?&lt;!\.)\b(üçün)\b</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.control.loop.saz</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\)</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>meta.brace.round.saz</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.for.saz</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>begin</key>
							<string>\(</string>
							<key>beginCaptures</key>
							<dict>
								<key>0</key>
								<dict>
									<key>name</key>
									<string>meta.brace.round.saz</string>
								</dict>
							</dict>
							<key>end</key>
							<string>(?=\))</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>#literal-keyword-storage</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#expression</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#literal-punctuation</string>
								</dict>
							</array>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>literal-function</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(?x)
  (?:\b(async)\s+)?
  \s*(işləv)(?:\s*(\*)|(?=\s|[(]))
  \s*([_$a-zA-Z][$\w]*)?\s*</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.type.saz</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>storage.type.function.saz</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>keyword.generator.asterisk.saz</string>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.saz</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?&lt;=\))</string>
					<key>name</key>
					<string>meta.function.saz</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#function-declaration-parameters</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>(?x)
  (\b[_$a-zA-Z][$\w]*)
  \s*=
  \s*(?:(async)\s+)?
  \s*(function)(?:\s*(\*)|(?=\s|[(]))
  \s*([_$a-zA-Z][$\w]*)?\s*</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.saz</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>storage.type.saz</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>storage.type.function.saz</string>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>keyword.generator.asterisk.saz</string>
						</dict>
						<key>5</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.saz</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?&lt;=\))</string>
					<key>name</key>
					<string>meta.function.saz</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#function-declaration-parameters</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>(?x)
  (\b_?[A-Z][$\w]*)?
  (\.)(prototype)
  (\.)([_$a-zA-Z][$\w]*)
  \s*=
  \s*(?:(async)\s+)?
  \s*(function)(?:\s*(\*)|(?=\s|[(]))
  \s*([_$a-zA-Z][$\w]*)?\s*</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>entity.name.class.saz</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.accessor.saz</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>variable.language.prototype.saz</string>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.accessor.saz</string>
						</dict>
						<key>5</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.saz</string>
						</dict>
						<key>6</key>
						<dict>
							<key>name</key>
							<string>storage.type.saz</string>
						</dict>
						<key>7</key>
						<dict>
							<key>name</key>
							<string>storage.type.function.saz</string>
						</dict>
						<key>8</key>
						<dict>
							<key>name</key>
							<string>keyword.generator.asterisk.saz</string>
						</dict>
						<key>9</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.saz</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?&lt;=\))</string>
					<key>name</key>
					<string>meta.prototype.function.saz</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#function-declaration-parameters</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>(?x)
  (\b_?[A-Z][$\w]*)?
  (\.)([_$a-zA-Z][$\w]*)
  \s*=
  \s*(?:(async)\s+)?
  \s*(function)(?:\s*(\*)|(?=\s|[(]))
  \s*([_$a-zA-Z][$\w]*)?\s*</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>entity.name.class.saz</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.accessor.saz</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.saz</string>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>storage.type.saz</string>
						</dict>
						<key>5</key>
						<dict>
							<key>name</key>
							<string>storage.type.function.saz</string>
						</dict>
						<key>6</key>
						<dict>
							<key>name</key>
							<string>keyword.generator.asterisk.saz</string>
						</dict>
						<key>7</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.saz</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?&lt;=\))</string>
					<key>name</key>
					<string>meta.function.static.saz</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#function-declaration-parameters</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>literal-function-call</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.saz</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>meta.group.braces.round.function.arguments.saz</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(?x)
  ([_$a-zA-Z][$\w]*)\s*
  (\(\s*\))</string>
					<key>name</key>
					<string>meta.function-call.without-arguments.saz</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.saz</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(?x)
  ([_$a-zA-Z][$\w]*)\s*
  (?=\()</string>
					<key>name</key>
					<string>meta.function-call.with-arguments.saz</string>
				</dict>
			</array>
		</dict>
		<key>literal-function-labels</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(?x)
  \b([_$a-zA-Z][$\w]*)
  \s*(:)
  \s*(?:(async)\s+)?
  \s*(function)(?:\s*(\*)|(?=\s|[(]))
  \s*([_$a-zA-Z][$\w]*)?\s*</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.saz</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.separator.key-value.saz</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>storage.type.saz</string>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>storage.type.function.saz</string>
						</dict>
						<key>5</key>
						<dict>
							<key>name</key>
							<string>keyword.generator.asterisk.saz</string>
						</dict>
						<key>6</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.saz</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?&lt;=\))</string>
					<key>name</key>
					<string>meta.function.json.saz</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#function-declaration-parameters</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>(?x)
  (?:
    ((')((?:[^']|\\')*)('))|
    ((")((?:[^"]|\\")*)("))
  )
  \s*(:)
  \s*(?:(async)\s+)?
  \s*(function)(?:\s*(\*)|(?=\s|[(]))
  \s*([_$a-zA-Z][$\w]*)?\s*</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>string.quoted.single.saz</string>
						</dict>
						<key>10</key>
						<dict>
							<key>name</key>
							<string>storage.type.saz</string>
						</dict>
						<key>11</key>
						<dict>
							<key>name</key>
							<string>storage.type.function.saz</string>
						</dict>
						<key>12</key>
						<dict>
							<key>name</key>
							<string>keyword.generator.asterisk.saz</string>
						</dict>
						<key>13</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.saz</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.saz</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.saz</string>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.saz</string>
						</dict>
						<key>5</key>
						<dict>
							<key>name</key>
							<string>string.quoted.double.saz</string>
						</dict>
						<key>6</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.saz</string>
						</dict>
						<key>7</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.saz</string>
						</dict>
						<key>8</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.saz</string>
						</dict>
						<key>9</key>
						<dict>
							<key>name</key>
							<string>punctuation.separator.key-value.saz</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?&lt;=\))</string>
					<key>name</key>
					<string>meta.function.json.saz</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#function-declaration-parameters</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>literal-keyword-storage</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>(?&lt;!\.)\b(yerli)\b</string>
					<key>name</key>
					<string>storage.type.saz</string>
				</dict>
			</array>
		</dict>
		<key>literal-keywords</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#literal-keyword-storage</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.control.flow.saz</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>keyword.generator.asterisk.saz</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(?&lt;!\.)\b(yield)\b(?:\s*(\*))?</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;!\.)\b(qaytar)\b</string>
					<key>name</key>
					<string>keyword.control.flow.saz</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;!\.)\b(əgər|başqa)\b</string>
					<key>name</key>
					<string>keyword.control.conditional.saz</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;!\.)\b(yaxala|nəhayət|fırlat|cəhd)\b</string>
					<key>name</key>
					<string>keyword.control.trycatch.saz</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;!\.)\b(qır|davamet|et|nəqədərki)\b</string>
					<key>name</key>
					<string>keyword.control.loop.saz</string>
				</dict>
			</array>
		</dict>
		<key>literal-labels</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(?x)
  (?&lt;!\?)(?&lt;!\?\s)(?=(
    ((')((?:[^']|\\')*)('))|
    ((")((?:[^"]|\\")*)("))
  )\s*:)</string>
					<key>end</key>
					<string>:</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.separator.key-value.saz</string>
						</dict>
					</dict>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#literal-string</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>string.unquoted.label.saz</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.separator.key-value.saz</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(?&lt;!\.|\?|\?\s)([_$a-zA-Z][$\w]*)\s*(:)</string>
					<key>name</key>
					<string>constant.other.object.key.saz</string>
				</dict>
			</array>
		</dict>
		<key>literal-language-constant</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>(?&lt;!\.)\bdoğru\b</string>
					<key>name</key>
					<string>constant.language.boolean.true.saz</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;!\.)\byanlış\b</string>
					<key>name</key>
					<string>constant.language.boolean.false.saz</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;!\.)\bheç\b</string>
					<key>name</key>
					<string>constant.language.null.saz</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;!\.)\bNaN\b</string>
					<key>name</key>
					<string>constant.language.nan.saz</string>
				</dict>
			</array>
		</dict>
		<key>literal-language-variable</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>(?&lt;!(?&lt;!\.\.)\.)\b(arguments)\b</string>
					<key>name</key>
					<string>variable.language.arguments.saz</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;!(?&lt;!\.\.)\.)\b(ali)\b</string>
					<key>name</key>
					<string>variable.language.super.saz</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;!(?&lt;!\.\.)\.)\b(öz)\b</string>
					<key>name</key>
					<string>variable.language.this.saz</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;=\.)\b(qurucu)\b</string>
					<key>name</key>
					<string>variable.language.constructor.saz</string>
				</dict>
			</array>
		</dict>
		<key>literal-method</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(?x)
  (?:\b(static)\s+)?
  (?:\b(async)\s+)?
  (?:(\*)\s*)?([_$a-zA-Z][$\w]*)\s*
  (?=\([^())]*\)(?:\s|/\*.*\*/)*\{)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.type.saz</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>storage.type.saz</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>keyword.generator.asterisk.saz</string>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>entity.name.method.saz</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?&lt;=\))</string>
					<key>name</key>
					<string>meta.method.saz</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#function-declaration-parameters</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>(?x)
  \b(?:(static)\s+)?
  (get|set)\s+
  ([_$a-zA-Z][$\w]*)\s*
  (?=\([^())]*\)(?:\s|/\*.*\*/)*\{)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.type.saz</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>storage.type.accessor.saz</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>entity.name.accessor.saz</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?&lt;=\))</string>
					<key>name</key>
					<string>meta.accessor.saz</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#function-declaration-parameters</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>literal-method-call</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>variable.other.class.saz</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.accessor.saz</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.saz</string>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>meta.group.braces.round.function.arguments.saz</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(?x)
  (?:(?&lt;=\.)|\b)
  ([A-Z][$\w]*)\s*(\.)
  ([_$a-zA-Z][$\w]*)\s*
  (\(\s*\))</string>
					<key>name</key>
					<string>meta.function-call.static.without-arguments.saz</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>variable.other.class.saz</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.accessor.saz</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.saz</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(?x)
  (?:(?&lt;=\.)|\b)
  ([A-Z][$\w]*)\s*(\.)
  ([_$a-zA-Z][$\w]*)\s*
  (?=\()</string>
					<key>name</key>
					<string>meta.function-call.static.with-arguments.saz</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.saz</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>meta.group.braces.round.function.arguments.saz</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(?x)
  (?&lt;=\.)
  ([_$a-zA-Z][$\w]*)\s*
  (\(\s*\))</string>
					<key>name</key>
					<string>meta.function-call.method.without-arguments.saz</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.saz</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(?x)
  (?&lt;=\.)
  ([_$a-zA-Z][$\w]*)\s*
  (?=\()</string>
					<key>name</key>
					<string>meta.function-call.method.with-arguments.saz</string>
				</dict>
			</array>
		</dict>
		<key>literal-module</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>(?&lt;!\.)\b(idxal|ixrac|varsayılan|burdan|kimi)\b</string>
					<key>name</key>
					<string>keyword.operator.module.saz</string>
				</dict>
			</array>
		</dict>
		<key>literal-number</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>(?i)(?:\B[-+]|\b)0x[0-9a-f]*\.(\B|\b[0-9]+)</string>
					<key>name</key>
					<string>invalid.illegal.numeric.hex.saz</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?:\B[-+]|\b)0[0-9]+\.(\B|\b[0-9]+)</string>
					<key>name</key>
					<string>invalid.illegal.numeric.octal.saz</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?xi)
  (?:\B[-+])?
  (?:
    \b0b[0-1]*|                 # binary
    \b0o[0-7]*|                 # octal
    \b0x[0-9a-f]*|              # hex
    (
      \B\.[0-9]+|               # e.g. .999
      \b[0-9]+(\.[0-9]*)?       # e.g. 999.999, 999. or 999
    )(e[-+]?[0-9]+)?            # e.g. e+123, E-123
  )</string>
					<key>name</key>
					<string>constant.numeric.saz</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?:\B[-+]|\b)(Sonsuzluq)\b</string>
					<key>name</key>
					<string>constant.language.infinity.saz</string>
				</dict>
			</array>
		</dict>
		<key>literal-operators</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>(?x)
  !(?!=)| # logical-not     right-to-left   right
  &amp;&amp;    | # logical-and     left-to-right   both
  \|\|  | # logical-or      left-to-right   both</string>
					<key>name</key>
					<string>keyword.operator.logical.saz</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?x)
  =(?!=)| # assignment      right-to-left   both</string>
					<key>name</key>
					<string>keyword.operator.assignment.saz</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?x)
  %=   | # assignment      right-to-left   both
  &amp;=   | # assignment      right-to-left   both
  \*=  | # assignment      right-to-left   both
  \+=  | # assignment      right-to-left   both
  -=   | # assignment      right-to-left   both
  /=   | # assignment      right-to-left   both
  \^=  | # assignment      right-to-left   both
  \|=  | # assignment      right-to-left   both
  &lt;&lt;=  | # assignment      right-to-left   both
  &gt;&gt;=  | # assignment      right-to-left   both
  &gt;&gt;&gt;= | # assignment      right-to-left   both</string>
					<key>name</key>
					<string>keyword.operator.assignment.augmented.saz</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?x)
  ~    | # bitwise-not     right-to-left   right
  &lt;&lt;   | # bitwise-shift   left-to-right   both
  &gt;&gt;&gt;  | # bitwise-shift   left-to-right   both
  &gt;&gt;   | # bitwise-shift   left-to-right   both
  &amp;    | # bitwise-and     left-to-right   both
  \^   | # bitwise-xor     left-to-right   both
  \|     # bitwise-or      left-to-right   both</string>
					<key>name</key>
					<string>keyword.operator.bitwise.saz</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?x)
  &lt;=   | # relational      left-to-right   both
  &gt;=   | # relational      left-to-right   both
  &lt;    | # relational      left-to-right   both
  &gt;      # relational      left-to-right   both</string>
					<key>name</key>
					<string>keyword.operator.relational.saz</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?x)
  ===  | # equality        left-to-right   both
  !==  | # equality        left-to-right   both
  ==   | # equality        left-to-right   both
  !=     # equality        left-to-right   both</string>
					<key>name</key>
					<string>keyword.operator.comparison.saz</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?x)
  --   | # decrement       n/a             right-or-left
  \+\+ | # increment       n/a             right-or-left
  /    | # division        left-to-right   both
  %    | # modulus         left-to-right   both
  \*   | # multiplication  left-to-right   both
  \+   | # addition        left-to-right   both
  -      # subtraction     left-to-right   both</string>
					<key>name</key>
					<string>keyword.operator.arithmetic.saz</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\?|:</string>
					<key>name</key>
					<string>keyword.operator.ternary.saz</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;!\.)\.\.\.</string>
					<key>name</key>
					<string>keyword.operator.spread.saz</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\.</string>
					<key>name</key>
					<string>keyword.operator.accessor.saz</string>
				</dict>
			</array>
		</dict>
		<key>literal-property-initializer</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.type.saz</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>variable.class.property.saz</string>
						</dict>
					</dict>
					<key>match</key>
					<string>\b(?:(static)\s+)?([_$a-zA-Z][$\w]*)\s*=</string>
					<key>name</key>
					<string>meta.class.property.saz</string>
				</dict>
			</array>
		</dict>
		<key>literal-prototype</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>entity.name.class.saz</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.accessor.saz</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>variable.language.prototype.saz</string>
						</dict>
					</dict>
					<key>match</key>
					<string>([_$a-zA-Z][$\w]*)(\.)(prototype)\b</string>
					<key>name</key>
					<string>meta.prototype.access.saz</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>entity.name.class.saz</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.accessor.saz</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>variable.language.prototype.saz</string>
						</dict>
					</dict>
					<key>match</key>
					<string>([_$a-zA-Z][$\w]*)(\.)(prototype)\s*=\s*</string>
					<key>name</key>
					<string>meta.prototype.declaration.saz</string>
				</dict>
			</array>
		</dict>
		<key>literal-punctuation</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\;</string>
					<key>name</key>
					<string>punctuation.terminator.statement.saz</string>
				</dict>
				<dict>
					<key>match</key>
					<string>,</string>
					<key>name</key>
					<string>meta.delimiter.comma.saz</string>
				</dict>
			</array>
		</dict>
		<key>literal-regexp</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(?x)
  (?&lt;=
    \.|\(|,|{|}|\[|;|,|&lt;|&gt;|&lt;=|&gt;=|==|!=|===|!==|\+|-|\*|%|\+\+|--|&lt;&lt;|&gt;&gt;|&gt;&gt;&gt;|&amp;|\||\^|!|~|&amp;&amp;|\|\||\?|:|=|\+=|-=|\*=|%=|&lt;&lt;=|&gt;&gt;=|&gt;&gt;&gt;=|&amp;=|\|=|\^=|/|/=|
    \Wnew|\Wdelete|\Wvoid|\Wtypeof|\Winstanceof|\Win|\Wdo|\Wreturn|\Wcase|\Wthrow|
    ^new|^delete|^void|^typeof|^instanceof|^in|^do|^return|^case|^throw|^
  )\s*
  (/)
  (?!/|\*|$)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.saz</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(/)([gimy]*)</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.saz</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>keyword.other.saz</string>
						</dict>
					</dict>
					<key>name</key>
					<string>string.regexp.saz</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>source.regexp.saz</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>literal-string</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>'</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.saz</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(')|(\n)</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.saz</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>invalid.illegal.newline.saz</string>
						</dict>
					</dict>
					<key>name</key>
					<string>string.quoted.single.saz</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#string-content</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>"</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.saz</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(")|(\n)</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.saz</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>invalid.illegal.newline.saz</string>
						</dict>
					</dict>
					<key>name</key>
					<string>string.quoted.double.saz</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#string-content</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>literal-switch</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(?&lt;!\.)\b(switch)\b</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.control.switch.saz</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\}</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>meta.brace.curly.saz</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.switch.saz</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#round-brackets</string>
						</dict>
						<dict>
							<key>begin</key>
							<string>\{</string>
							<key>beginCaptures</key>
							<dict>
								<key>0</key>
								<dict>
									<key>name</key>
									<string>meta.brace.curly.saz</string>
								</dict>
							</dict>
							<key>end</key>
							<string>(?=})</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>begin</key>
									<string>(?&lt;!\.)\b(case|default)\b</string>
									<key>beginCaptures</key>
									<dict>
										<key>1</key>
										<dict>
											<key>name</key>
											<string>keyword.control.switch.saz</string>
										</dict>
									</dict>
									<key>end</key>
									<string>(?=:)</string>
									<key>patterns</key>
									<array>
										<dict>
											<key>include</key>
											<string>#expression</string>
										</dict>
									</array>
								</dict>
								<dict>
									<key>include</key>
									<string>$self</string>
								</dict>
							</array>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>literal-tagged-html</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(html)(`)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>meta.function-call.tagged-template.saz</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.template.begin.saz</string>
						</dict>
					</dict>
					<key>contentName</key>
					<string>text.html.basic.embedded.saz</string>
					<key>end</key>
					<string>`</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.template.end.saz</string>
						</dict>
					</dict>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>text.html.basic</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>literal-template-string</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>([a-zA-Z$_][\w$_]*)?(`)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>entity.template-string.tag.name.saz</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.template-string.begin.saz</string>
						</dict>
					</dict>
					<key>end</key>
					<string>`</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.template-string.end.saz</string>
						</dict>
					</dict>
					<key>name</key>
					<string>string.template-string.saz</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#string-content</string>
						</dict>
						<dict>
							<key>begin</key>
							<string>\${</string>
							<key>beginCaptures</key>
							<dict>
								<key>0</key>
								<dict>
									<key>name</key>
									<string>punctuation.template-string.element.begin.saz</string>
								</dict>
							</dict>
							<key>end</key>
							<string>}</string>
							<key>endCaptures</key>
							<dict>
								<key>0</key>
								<dict>
									<key>name</key>
									<string>punctuation.template-string.element.end.saz</string>
								</dict>
							</dict>
							<key>name</key>
							<string>entity.template-string.element.saz</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>#expression</string>
								</dict>
							</array>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>literal-variable</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>[A-Z][_$\dA-Z]*\b</string>
					<key>name</key>
					<string>variable.other.constant.saz</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.dollar.saz</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(\$)[$\w]+</string>
					<key>name</key>
					<string>variable.other.dollar.saz</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>variable.other.class.saz</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.accessor.saz</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>variable.other.property.static.saz</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(?x)
  \b([A-Z][$\w]*)\s*(\.)
  ([_$a-zA-Z][$\w]*)</string>
					<key>name</key>
					<string>meta.property.class.saz</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>variable.other.object.saz</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(?&lt;!\.)[_$a-zA-Z][$\w]*\s*(?=[\[\.])</string>
					<key>name</key>
					<string>variable.other.object.saz</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>variable.other.property.saz</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(?&lt;=\.)\s*[_$a-zA-Z][$\w]*</string>
					<key>name</key>
					<string>meta.property.object.saz</string>
				</dict>
				<dict>
					<key>match</key>
					<string>[_$a-zA-Z][$\w]*</string>
					<key>name</key>
					<string>variable.other.readwrite.saz</string>
				</dict>
			</array>
		</dict>
		<key>round-brackets</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>\(</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>meta.brace.round.saz</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\)</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>meta.brace.round.saz</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.group.braces.round</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#expression</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>special-comments-conditional-compilation</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>/\*(?=@)</string>
					<key>captures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.saz</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\*/</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.control.conditional.saz</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.keyword.saz</string>
						</dict>
					</dict>
					<key>name</key>
					<string>comment.block.conditional.saz</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>match</key>
							<string>/\*</string>
							<key>name</key>
							<string>punctuation.definition.comment.saz</string>
						</dict>
						<dict>
							<key>include</key>
							<string>$self</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.keyword.saz</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(@)(əgər|başqa)\b</string>
					<key>name</key>
					<string>keyword.control.conditional.saz</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.variable.saz</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(@)(_win32|_win16|_mac|_alpha|_x86|_mc680x0|_PowerPC|_jscript|_jscript_build|_jscript_version|_debug|_fast|[a-zA-Z]\w+)</string>
					<key>name</key>
					<string>variable.other.conditional.saz</string>
				</dict>
			</array>
		</dict>
		<key>square-brackets</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>\[</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>meta.brace.square.saz</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\]</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>meta.brace.square.saz</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.group.braces.square</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#expression</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>string-content</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\\\s*\n</string>
					<key>name</key>
					<string>constant.character.escape.newline.saz</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\\(x[\da-fA-F]{2}|u[\da-fA-F]{4}|.)</string>
					<key>name</key>
					<string>constant.character.escape.saz</string>
				</dict>
			</array>
		</dict>
		<key>support</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\b(Array|Boolean|Date|Function|Map|Math|Number|Object|Promise|Proxy|RegExp|Set|String|WeakMap)\b</string>
					<key>name</key>
					<string>support.class.builtin.saz</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;!\.)\b(global|GLOBAL|root|__dirname|__filename)\b</string>
					<key>name</key>
					<string>support.type.object.node.saz</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(Buffer|EventEmitter|Server|Pipe|Socket|REPLServer|ReadStream|WriteStream|Stream|Inflate|Deflate|InflateRaw|DeflateRaw|GZip|GUnzip|Unzip|Zip)\b</string>
					<key>name</key>
					<string>support.class.node.saz</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>{{</string>
					<key>end</key>
					<string>}}</string>
					<key>name</key>
					<string>meta.tag.mustache.saz</string>
				</dict>
			</array>
		</dict>
	</dict>
	<key>scopeName</key>
	<string>source.saz</string>
	<key>uuid</key>
	<string>487CF323-A3F9-48FA-B140-DCE8C893E664</string>
</dict>
</plist>
